- name: B18.V
  reversible: true
  numStates: 20
  # ELB: I've never named the models beyond the parameters, 
  # e.g., V or VP etc - I just added B18 for Braun (2018)
  # ELB: I couldn't find how you specified amino acid data 
  # in the forData line so I just used "AA" - sorry if missed something obvious
  forData: AA
  parameters:
  - name: V
    description: volume parameter
    range: [ -10, +20 ] # Technically, the parameter can range for 
                      # arbitrarily large negative values to arbitrarily 
                      # large positive, so -inf to +inf. In practice, 
                      #I suspect -10 to +20 is *way* more than enough
    property: [31, 124, 56, 54, 55, 85, 83, 3, 96, 111, 111, 119, 105, 132, 32.5, 32, 61, 170, 136, 84]
# Amino acid property in order A, R, N, D, C, Q, E, G, H, I, L, K, M, F, P, S, T, W, Y, V
# It might be good to specify that the delta matrix is the 
# normalized absolute value of Vi - Vj -- normalized absolute value
# of the difference in the value of the physicochemical property 
# makes sense to me but perhaps there could be other ways to calculate distances
  - name: f[1..20]
    description: Amino acid state frequency
    type: frequency # make parameters in range [0,1] and sum to 1.0
  rateMatrix:  
   - [   -, exp(-V*deltaV[1,2])*f[2], exp(-V*deltaV[1,3])*f[3], exp(-V*deltaV[1,4])*f[4],  … (20)]
   - [ exp(-V*deltaV[1,2])*f[1],   -, exp(-V*deltaV[2,3])*f[3], exp(-V*deltaV[2,4])*f[4],  … (20)]
   - [ exp(-V*deltaV[1,4])*f[1], exp(-V*deltaV[2,3])*f[2],   -, exp(-V*deltaV[3,4])*f[4],  … (20)]
   - [ etc,  … (20)]
   -  …
  stateFrequency: [ f ]
